---

- fail:
    msg: "Only set one of kubernetes_context or openshift_host"
  when: openshift_host is defined and kubernetes_context is defined
  tags: always

- name: Set output directory fact
  set_fact:
    output_dir: "./output"
  tags: always

- name: Ensure output directory exists
  file: 
    path: "{{ output_dir }}"
    state: directory
    mode: 0700
  tags: always

- include_tasks: "{{ tasks }}"
  with_items:
    - openshift_auth.yml
    - openshift.yml
  loop_control:
    loop_var: tasks
  when: openshift_host is defined
  tags: always

- include_tasks: "{{ tasks }}"
  with_items:
    - kubernetes_auth.yml
    - kubernetes.yml
  loop_control:
    loop_var: tasks
  when: kubernetes_context is defined
  tags: always

- include_tasks: certs.yml
  tags: [install]

- include_tasks: ssh_keys.yml
  tags: [install]

- include_tasks: cleanup.yml
  tags: [deprovision, upgrade]

- include_tasks: deprecated.yml
  tags: always

- name: Use kubectl or oc
  set_fact:
    kubectl_or_oc: "{{ openshift_oc_bin if openshift_oc_bin is defined else 'kubectl' }}"
  tags: always

- name: Deploy PostgreSQL Operator (OpenShift)
  tags: [install, upgrade]
  block:
    - name: Set output directory fact
      set_fact:
        output_dir: "./output"
    
    - name: Create PGO CRDs
      command: "{{ kubectl_or_oc }} create -f ./roles/operator/files/crd.yaml -n {{ kubernetes_namespace }}"
      ignore_errors: no
      no_log: false

    - name: Template Cluster RBAC
      template:
        src: cluster-rbac.yaml.j2
        dest: "{{ output_dir }}/cluster-rbac.yaml"
        mode: '0600'

    - name: Create Cluster RBAC
      command: "{{ kubectl_or_oc }} create -f {{ output_dir }}/cluster-rbac.yaml -n {{ kubernetes_namespace }}"
    
    - name: Template PGO RBAC
      template:
        src: rbac.yaml.j2
        dest: "{{ output_dir }}/rbac.yaml"
        mode: '0600'

    - name: Create PGO RBAC
      command: "{{ kubectl_or_oc }} create -f {{ output_dir }}/rbac.yaml -n {{ kubernetes_namespace }}"

    - name: Template PGO User
      template:
        src: pgouser.j2
        dest: "{{ output_dir }}/pgouser"
        mode: '0600'

    - name: Template Local PGO User
      template:
        src: pgouser.local.j2
        dest: "~/.pgouser"
        mode: '0400'

    - name: Template PGO Configuration
      template:
        src: pgo.yaml.j2
        dest: "{{ output_dir }}/pgo.yaml"
        mode: '0600'

    - name: Create PGO BackRest Repo ConfigMap
      command: |
        {{ kubectl_or_oc }} create secret generic pgo-backrest-repo-config \
          --from-file=authorized_keys='{{ output_dir }}/authorized_keys' \
          --from-file=id_rsa='{{ output_dir }}/id_rsa' \
          --from-file=ssh_host_rsa_key='{{ output_dir }}/ssh_host_rsa_key' \
          --from-file=ssh_host_ecdsa_key='{{ output_dir }}/ssh_host_ecdsa_key' \
          --from-file=ssh_host_ed25519_key='{{ output_dir }}/ssh_host_ed25519_key' \
          --from-file=sshd_config='./roles/operator/files/pgo-backrest-repo/sshd_config' \
          --from-file=config='./roles/operator/files/pgo-backrest-repo/config' \
          -n {{ kubernetes_namespace }}
      ignore_errors: yes
      no_log: true

    - name: Create PGO API Secret
      command: |
        {{ kubectl_or_oc }} create secret generic pgo-auth-secret \
          --from-file=server.crt='{{ output_dir }}/pg-operator.crt' \
          --from-file=server.key='{{ output_dir }}/privkey.pem' \
          --from-file=pgouser='{{ output_dir }}/pgouser' \
          --from-file=pgorole='./roles/operator/files/pgorole' \
          -n {{ kubernetes_namespace }}
      ignore_errors: yes
      no_log: true

    - name: Create PGO ConfigMap
      command: |
        {{ kubectl_or_oc }} create configmap pgo-config \
          --from-file=pgo.yaml='{{ output_dir }}/pgo.yaml' \
          --from-file='./roles/operator/files/pgo-configs' \
          --from-file='./roles/operator/files/pgo-configs/cluster/1' \
          -n {{ kubernetes_namespace }}

    - name: Create PGO Service
      command: |
        {{ kubectl_or_oc }} create --filename='./roles/operator/files/service.json' \
          -n {{ kubernetes_namespace }}

    - name: Template PGO Deployment
      template:
        src: deployment.json.j2
        dest: "{{ output_dir }}/deployment.json"
        mode: '0600'

    - name: Deploy PGO
      command: |
        {{ kubectl_or_oc }} create --filename='{{ output_dir }}/deployment.json' \
          -n {{ kubernetes_namespace }}
